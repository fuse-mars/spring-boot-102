{"name":"Spring boot - 102","tagline":"Spring boot application with a GET and a POST requests ","body":"### Overview\r\nThis Article explains step by step how to create a restful spring-boot application\r\n### Use case\r\nWe are build an application that allows users to store api specifications.\r\n\r\nPOST url: `<host>/api/api-spec`\r\nPOST request:\r\n* API = `<host>/api`\r\n* METHOD = `GET, POST, PUT, DELETE`\r\n* HEADERS = `{Authorization: \"\", hash: \"\"}`\r\n* QUERY_PARAMS = `{userdata: {a: 1, b: 2}}`\r\n\r\nPOST response:\r\n* Saved object\r\n\r\nGET url: `<host>/api/api-spec/<id>`\r\nGET request:\r\n* ID = `object id`\r\n\r\nGET response:\r\n* Saved specified by the id\r\n\r\nTechnology:\r\n* [Gradle](https://gradle.org/)\r\n* [Spring Boot](http://projects.spring.io/spring-boot/)\r\n* [Spring Data](http://projects.spring.io/spring-data/)\r\n\r\nSteps followed:\r\n* create the application structure (on *nix machines)\r\n```\r\nmkdir -p ~/Documents/projects/spring-boot-102/src/main/java/apispec\r\nmkdir -p ~/Documents/projects/spring-boot-102/src/main/resources\r\nmkdir -p ~/Documents/projects/spring-boot-102/src/test\r\n```\r\n* Add a project management tool\r\n```\r\ncd ~/Documents/projects/spring-boot-102\r\ngradle init\r\n```\r\n`gradle init` creates the build.gradle. \r\nAfter this, we add the project dependencies and other information needed to identify the current projet.\r\n\r\nFinal build.gradle looks like this.\r\n\r\n```\r\nbuildscript {\r\n     repositories {\r\n         mavenCentral()\r\n     }\r\n     dependencies {\r\n         classpath(\"org.springframework.boot:spring-boot-gradle-plugin:1.2.6.RELEASE\")\r\n     }\r\n }\r\napply plugin: 'java'\r\napply plugin: 'idea'\r\napply plugin: 'spring-boot'\r\n\r\nspringBoot {\r\n  mainClass = 'apispec.ApiSpecController'\r\n}\r\njar {\r\n    baseName = 'spring-boot-102'\r\n    version =  '0.0.1'\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\nsourceCompatibility = 1.8\r\ntargetCompatibility = 1.8\r\n\r\ndependencies {\r\n    compile 'org.springframework.boot:spring-boot-starter-data-rest'\r\n    compile 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n    compile 'com.h2database:h2'\r\n\r\n    compile 'org.slf4j:slf4j-api:1.7.12'\r\n    testCompile 'junit:junit:4.12'\r\n}\r\n\r\ntask wrapper(type: Wrapper) {\r\n    gradleVersion = '2.7'\r\n}\r\n```\r\n\r\n* Add data related library dependancies\r\n```\r\norg.springframework.boot:spring-boot-starter-data-rest\r\norg.springframework.boot:spring-boot-starter-data-jpa\r\n```\r\n\r\n* Add a model object (this is basically a java class)\r\n```\r\ncd ~/Documents/projects/spring-boot-102\r\ntouch src/main/java/apispec/ApiSpec.java\r\n```\r\n```\r\n// ApiSpec.java - model object definition\r\n\r\npackage apispec;\r\n\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.GeneratedValue;\r\nimport javax.persistence.GenerationType;\r\nimport javax.persistence.Id;\r\n\r\n@Entity\r\npublic class ApiSpec {\r\n\r\n  \t@Id\r\n\t@GeneratedValue(strategy = GenerationType.AUTO)\r\n\tprivate long id;\r\n\tpublic long getId() { return id;}\r\n\r\n\tprivate String api;\r\n  \tprivate String method;\r\n  \tprivate String headers;\r\n\tprivate String queryParams;\r\n\r\n  \tpublic String getApi() { return api;}\r\n  \tpublic void setApi(String api) {  this.api = api;}\r\n\r\n  \tpublic String getMethod() { return method;}\r\n\tpublic void setMethod(String method) { this.method = method;}\r\n\r\n  \tpublic String getHeaders() {return headers;}\r\n  \tpublic void setHeaders(String headers) { this.headers = headers;}\r\n\r\n  \tpublic String getQueryParams() {return queryParams;}\r\n\tpublic void setQueryParams(String queryParams) {  this.queryParams = queryParams;}\r\n\r\n  \tpublic ApiSpec(){}\r\n  \tpublic ApiSpec(String api, String method, String headers, String queryParams) {\r\n    \t\tthis.api = api;\r\n    \t\tthis.method = method;\r\n    \t\tthis.headers = headers;\r\n    \t\tthis.queryParams = queryParams;\r\n\t}\r\n}\r\n```\r\n\r\n* Add a controller class (it is in charge of serving 2 restful API's)\r\n```\r\ncd ~/Documents/projects/spring-boot-102\r\ntouch src/main/java/apispec/ApiSpecController.java\r\n```\r\n```\r\n// ApiSpecController.java - controller and application starter/entry point\r\npackage apispec;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class ApiSpecController {\r\n\r\n  public static void main(String [] arguments){\r\n    SpringApplication.run(ApiSpecController.class, arguments);\r\n  }\r\n}\r\n```\r\n\r\n* Add a repository class (it is in charge of data storage)\r\n```\r\ncd ~/Documents/projects/spring-boot-102\r\ntouch src/main/java/ApiSpecRepository.java\r\n```\r\n```\r\n// ApiSpecRepository.java - repository for data storage\r\npackage apispec;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.data.repository.PagingAndSortingRepository;\r\nimport org.springframework.data.repository.query.Param;\r\nimport org.springframework.data.rest.core.annotation.RepositoryRestResource;\r\n\r\n@RepositoryRestResource(collectionResourceRel = \"apispec\", path = \"apispec\")\r\npublic interface ApiSpecRepository extends PagingAndSortingRepository<ApiSpec, Long> {\r\n\r\n\tList<ApiSpec> findByApi(@Param(\"api\") String api);\r\n\r\n}\r\n```\r\n\r\n* Build the application\r\n```\r\ngradle build\r\n```\r\n* Run the application\r\n```\r\ngradle bootRun\r\n```\r\n* Access the application from a web browser\r\n```\r\nhttp://localhost:8080/apispec\r\n```\r\n\r\nResources:\r\n* https://docs.gradle.org/current/userguide/build_init_plugin.html\r\n* http://spring.io/guides/gs/accessing-data-rest\r\n\r\nTags: spring boot general architecture, ","google":"UA-68265226-1","note":"Don't delete this file! It's used internally to help with page regeneration."}